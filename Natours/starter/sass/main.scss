/*
Codepens done during sections
https://codepen.io/anon/pen/KBWmLp?editors=1100#0

Always control height of elements and let browser figure out width
box-sizing gets rid of padding and margin when set to border-box of any box elements
background-position - specifies which side of the background should anchor when resizing and the opposite sides will be the ones to resize to keep dimensions
background-image - specifies layers of images to be used as the background, left to right is top layer to bottom layer, to right bottom is direction of gradient
polygon - specify four corners of the clip (change in x change in y,...) - top left, top right, bottom right, bottom left
clip-path - path to clip for content of element (triangle is clip-path: polygon(50% 0, 50% 0, 100% 100%, 0 100%))
position: relative on parent element allows for position absolute with **top left bottom right** specified from that reference parent element
display:block - turns the element this is assigned to, to a block level element (aka it takes up the whole width thats available to it)
transform: translate - -50% moves the element 50% of its width (not its parents width) in whichever direction is specified
@keyframes moveInLeft specifies animation where each percentage object specifies what should be happening at that time point - opacity and transform are the two animation properties that are optimized for the browser
ease-out - slower in beginning and faster at end
:link pseudo class is a special state of the selector - style elements under a special condition (this one is for when it is an anchor element)
padding : top bottom, left right (50 50), top right bottom left (50 50 50 50)
transition needs to be on the initial state and it specifies the duration of the properties that will change to the hover or active state
box-shadow: x y blur color (positive x is right and positive y is down)
"after" pseudo element is treated as a child of the element you are tying it to. and content must be specified even if its blank.
z-index negative is behind other elements
opacity: 0 is trick for making something fadeout
animation backwards : will backwards fill the element and start it from 0 fill
Three pillars of writing good html and css
    Responsive design
        one website that works well across all screen sizes and devices
        standard today
        Fluid layouts, media queries, responsive images, correct units, desktop first vs mobile first
    Maintainable and scalable code
        Clean, easy to understand, growth, reusable, how to organize files, how to name classes, how to structure HTML
    Web performance
        Less HTTP requests, less code, compress code, use a css preprocessor, less images, compress images
What happens to CSS when we load up a webpage?
Load HTML -> Parse HTML (decodes each line) -> Creates Document Object Model (DOM) Tree of children and parents
                |-> Load CSS -> Parse CSS - 1. Resolve conflicting CSS declarations (cascade) - 2. Process final CSS values -> CSS Object Model (CSSOM)
Both together are the render tree -> Website rendering : the visual formatting model -> Final rendered website
A CSS rule is made up of the selector (e.g. .my-class) and the declaration block (e.g. color: blue; which is a declaration with a property and a declared value)
Cascade
    Process of combining different stylesheets and resolving conflicts between CSS rules and declarations, when more than one rule applies to a certain element
    We make author declarations, there are user declarations (browser changes), default browser declarations (default browser user agent css)
    It chooses importance through
        Importance(weight) > specificity > Source order (last declaration in code overrides all other declarations)
    Importance
        1. User !important declarations
        2. Author !important declarations
        3. Author declarations
        4. User declarations
        5. Default browser declarations
    Specificity (# - # - # - #) Highest priority on left and lowest on right (item with 1 ID is more specific than one with 1000 classes)
        1. Inline styles
        2. IDs
        3. Classes, pseudo-classes, attribute
        4. Elements, pseudo-elements
Try to use specificities more than !important to make it more maintainable
Universal selector has no specificity value (0,0,0,0)
Rely on source order when usinng 3rd party stylesheets - always put author stylesheet last****
How CSS values are processed 
    *insert image here cssvals.png
How units are converted from relative to absolute(px)
    insert image here unitsconv.png
    ems and rems are used for more robust layouts, because changing font sizes automatically changes length and gives flexibility with great strength
    vh is 1% of viewport height
    vw is 1% of viewport width
    browsers specify a root font size for each page (usually 16 px)
Inheritance in CSS
    Every CSS property must have a value -> Is there a cascaded value? If Yes, specified value = cascaded value - If No -> Is the property inherited? (specific to each property) => If Yes, specified value = computed value of parent element - If no, Specified value = initial value (specific to each property)
    Inherit keyword forces inheritance on a certain property
    initial keyword resets a property to its initial value
10px is for ease of use with root element html - 1 rem equals 10 pixels because of this
Root font size as percentage is good practice because it takes percentage of browsers font size or if user changes then it takes their value and doesnt take precedence from being a author defined style by us at 50 px for example.
Rem isnt supported below IE9
Having box sizing inherit in universal selector and box sizing defined in body is better practice for plugins and such because it can be overridden and change the style
The visual formatting model
    Algorithm that calculates boxes and determines the layout of these boxes, for each element in the render tree, in order to determine the final layout of page
        Dimensions of boxes: the box model;
        Box type: inline, block and inline-block;
        Positioning scheme: floats and positioning;
        Stacking contexts;
        Other elements in the render treel
        Viewport size, dimensions of images, etc.
The box model
    insert image boxmodel.png
Box sizing border box changes the width and height calc from being height plus padding and width plus padding to content height and width plus padding 
display: block, display flex, display list item, display table all produce block level elements
inline-boxes dont have padding and margins top and bottom and doesnt have height or width
inline-block is a mixture and is allowed to have height and width and top bottom paddings with occupy content properties
Positioning schemes
    Normal Flow
        default positioning scheme
        not floated
        not absolutely positioned
        elements laid out according to their source order
    Floats
        element is removed from the normal flow
        text and inline elements will wrap around the floated element
        the container will not adjust its height to the element (container will not adjust to height of elemennt when it has float - fixed by using clear fixes)
    Absolute positioning
        element is removed from the normal flow
        no impact on surrounding content or elements
        we use top, bottom, left, and right to offset element from its relatively positioned container (can overlap other items but it is solved using stacking context in css - order of elements on page being rendered are layers that form a stack and high up stack goes last)
Component driven design
    Modular building blocks that make up interfaces
    held togethr by the layout of the page
    re-usable across a project, and between diff projects
    independent, allowing us to use them anywhere on the page
Block Element Modifier
    .block
    .block__element
    .block__element--modifier
    Low specificity BEM selectors
7-1 pattern
    7 different folders for partial Sass files, and
    1 main Sass file to import all other files into a compiled CSS stylesheet (Can replace Sass with any other pre processor)
    7 folders
        base/
        components/
        layout/
        pages/
        themes/
        abstracts/
        vendors/
New blocks can be nested inside other blocks in the BEM model   
SASS
    Sass is a CSS preprocessor, an extension of CSS that adds power and elegance to the basic language
    sass source code -> sass compiler -> compiled css code
    Main features
        variables : for reusable values such as colors, font-sizes, spacing, etc
        nesting : to nest selectors inside of one another, allowing us to write less
        operators : for mathematical operations inside  of css
        partials and imports : to write css in different files and importing them all into one file
        mixins : to write reusable pieces of css code
        functions : similar to mixins, with the difference that they produce a value that can than be used
        extends : to make different selectors inherit declarations that are common to all of them
        control directives : for writing complex code using conditionals and loops (not covered)
    Two syntaxes
        Sass - indentation sensitive and doesnt using curly braces
        SCSS - Easier of the two to look like original css
Review : Basic Responsive Design Principles
    1. Fluid Grids and Layouts
        To allow content to easily adapt to the current viewport width used to browse the website. Use % rather than px for all layout-related lengths
    2. Flexible/Responsive images
        Images behave differently than text content, and so we need to ensure that they also adapt nicely to the current viewport.
    3. Media Queries
        To change styles on certain viewport widths (breakpoints), allowing us to create different version of our website for different widths
Layout Types
    Float Layouts (As of 2017 most supported from all browsers)
        Float -> Float -> Float
    Flexbox
    CSS GRID
*/

@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";

@import "base/animations";
@import "base/base";
@import "base/typography";
@import "base/utilities";

@import "components/button";
@import "components/composition";
@import "components/feature-box";
@import "components/card";
@import "components/story";
@import "components/bg-video";
@import "components/form";

@import "layout/grid";
@import "layout/header";

@import "pages/home";